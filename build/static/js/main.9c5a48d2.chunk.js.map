{"version":3,"sources":["styles/global.tsx","styles/theme.tsx","layouts/main.tsx","serviceWorker.ts","index.tsx"],"names":["GlobalStyle","styles","css","theme","xs","sm","md","lg","xl","xxl","up","right","down","left","white","black","gray100","gray200","gray300","gray400","gray500","purple100","purple200","purple300","blue100","blue200","blue300","green100","green200","green300","yellow100","yellow200","yellow300","red100","red200","red300","pink100","pink200","pink300","Container","styled","Main","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"q0CAGO,IAAMA,EAAc,kBACzB,kBAAC,IAAD,CACEC,OAAQC,YAAF,Q,QCuDKC,EATJ,eAhBO,CAChBC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,IAAK,QAUI,GAPY,CACrBC,GAAI,IACJC,MAAO,KACPC,KAAM,MACNC,KAAM,OAGG,GAnDI,CACbC,MAAO,UACPC,MAAO,UAEPC,QAAS,UACTC,QAAS,UACTC,QAAS,UACTC,QAAS,UACTC,QAAS,UAETC,UAAW,UACXC,UAAW,UACXC,UAAW,UAEXC,QAAS,UACTC,QAAS,UACTC,QAAS,UAETC,SAAU,UACVC,SAAU,UACVC,SAAU,UAEVC,UAAW,UACXC,UAAW,UACXC,UAAW,UAEXC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UAERC,QAAS,UACTC,QAAS,UACTC,QAAS,Y,kIC3BJ,IAAMC,EAAYC,YAAO,MAAPA,CAAH,IACXrC,EAAMW,MACKX,EAAMY,OAab0B,E,uKAPX,OACE,kBAACF,EAAD,KACE,kBAAC,EAAD,W,GAJWG,IAAMC,WCCLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9c5a48d2.chunk.js","sourcesContent":["import React from 'react';\nimport { Global, css } from '@emotion/core';\n\nexport const GlobalStyle = () => (\n  <Global\n    styles={css`\n      @font-face {\n        font-family: 'Rubik';\n        src: url('./fonts/rubik-regular.woff') format('woff2'),\n          url('./fonts/rubik-regular.woff') format('woff');\n        font-weight: normal;\n        font-style: normal;\n      }\n      @font-face {\n        font-family: 'Rubik';\n        src: url('./fonts/rubik-medium.woff') format('woff2'),\n          url('./fonts/rubik-medium.woff') format('woff');\n        font-weight: bold;\n        font-style: normal;\n      }\n      body {\n        margin: 0;\n        font-family: 'Rubik', sans-serif;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        font-size: 16px;\n      }\n      h1 {\n        font-size: 2.488em;\n      }\n      h2 {\n        font-size: 2.074em;\n      }\n      h3 {\n        font-size: 1.728em;\n      }\n      h4 {\n        font-size: 1.44em;\n      }\n      h5 {\n        font-size: 1.2em;\n      }\n      p {\n        font-size: 1em;\n      }\n      small {\n        font-size: 0.833em;\n      }\n    `}\n  />\n)\n","const colors = {\n  white: '#FFFFFF',\n  black: '#1D1127',\n\n  gray100: '#FAF9FB',\n  gray200: '#C6BECF',\n  gray300: '#9386A0',\n  gray400: '#776589',\n  gray500: '#2B1D38',\n\n  purple100: '#D4D1EC',\n  purple200: '#A396DA',\n  purple300: '#6C5FC7',\n\n  blue100: '#D2DFF7',\n  blue200: '#92A8EA',\n  blue300: '#3D74DB',\n\n  green100: '#B6ECDF',\n  green200: '#7DD6BE',\n  green300: '#33BF9E',\n\n  yellow100: '#FDE8B4',\n  yellow200: '#FFD577',\n  yellow300: '#FFC227',\n\n  red100: '#FCC6C8',\n  red200: '#FD918F',\n  red300: '#F55459',\n\n  pink100: '#FDC9D7',\n  pink200: '#FA93AB',\n  pink300: '#F05781',\n} as const; \n\nconst iconSizes = {\n  xs: '12px',\n  sm: '16px',\n  md: '20px',\n  lg: '24px',\n  xl: '32px',\n  xxl: '72px',\n} as const;\n\nconst iconDirections = {\n  up: '0',\n  right: '90',\n  down: '180',\n  left: '270',\n} as const;\n\nconst theme = {\n  ...iconSizes,\n  ...iconDirections,\n  ...colors\n}\n\nexport type Theme = typeof theme;\nexport type Color = keyof typeof colors;\n\nexport default theme;","import React from 'react';\nimport styled from '@emotion/styled';\nimport { GlobalStyle } from '../styles/global';\nimport theme from '../styles/theme';\n\nexport const Container = styled('div')`\n  color: ${theme.white};\n  background-color: ${theme.black};\n  height: 100vh;\n`;\n\nclass Main extends React.Component {\n  render() {\n    return (\n      <Container>\n        <GlobalStyle />\n      </Container>\n  )}\n}\n\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './layouts/main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}