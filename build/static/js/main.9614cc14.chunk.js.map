{"version":3,"sources":["assets/tour-alerts.svg","assets/tour-issues.svg","assets/tour-summary.svg","assets/tour-trace.svg","assets/tour-builder.svg","assets/tour-graph.svg","assets/tour-search.svg","assets/tour-queries.svg","assets/tour-discover.svg","assets/tour-commits.svg","assets/tour-terminal.svg","assets/tour-releases.svg","assets/tour-email.svg","assets/tour-graphdouble.svg","assets/tour-tags.svg","assets/tour-breadcrumbs.svg","assets/tour-feedback.svg","assets/tour-results.svg","styles/global.tsx","layouts/main.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","GlobalStyle","styles","css","Container","styled","Image","Main","src","SummarySvg","alt","IssueSvg","AlertSvg","TraceSvg","BuilderSvg","GraphSvg","SearchSvg","QueriesSvg","DiscoverSvg","CommitSvg","TerminalSvg","ReleasesSvg","EmailSvg","GraphDoubleSvg","TagsSvg","BreadcrumbsSvg","FeedbackSvg","ResultsSvg","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,2zCCGpC,IAAMC,EAAc,kBACzB,kBAAC,IAAD,CACEC,OAAQC,YAAF,Q,oqBCoBV,IAAMC,GAAYC,YAAO,MAAPA,CAAH,KAQTC,GAAQD,YAAO,MAAPA,CAAH,KAkCIE,G,uKAzBX,OACE,kBAACH,GAAD,KACE,kBAAC,EAAD,MACA,kBAACE,GAAD,CAAOE,IAAKC,IAAYC,IAAI,KAC5B,kBAACJ,GAAD,CAAOE,IAAKG,IAAUD,IAAI,KAC1B,kBAACJ,GAAD,CAAOE,IAAKI,IAAUF,IAAI,KAC1B,kBAACJ,GAAD,CAAOE,IAAKK,IAAUH,IAAI,KAC1B,kBAACJ,GAAD,CAAOE,IAAKM,IAAYJ,IAAI,KAC5B,kBAACJ,GAAD,CAAOE,IAAKO,IAAUL,IAAI,KAC1B,kBAACJ,GAAD,CAAOE,IAAKQ,IAAWN,IAAI,KAC3B,kBAACJ,GAAD,CAAOE,IAAKS,IAAYP,IAAI,KAC5B,kBAACJ,GAAD,CAAOE,IAAKU,IAAaR,IAAI,KAC7B,kBAACJ,GAAD,CAAOE,IAAKW,IAAWT,IAAI,KAC3B,kBAACJ,GAAD,CAAOE,IAAKY,IAAaV,IAAI,KAC7B,kBAACJ,GAAD,CAAOE,IAAKa,IAAaX,IAAI,KAC7B,kBAACJ,GAAD,CAAOE,IAAKc,IAAUZ,IAAI,KAC1B,kBAACJ,GAAD,CAAOE,IAAKe,IAAgBb,IAAI,KAChC,kBAACJ,GAAD,CAAOE,IAAKgB,IAASd,IAAI,KACzB,kBAACJ,GAAD,CAAOE,IAAKiB,IAAgBf,IAAI,KAChC,kBAACJ,GAAD,CAAOE,IAAKkB,IAAahB,IAAI,KAC7B,kBAACJ,GAAD,CAAOE,IAAKmB,IAAYjB,IAAI,U,GAtBjBkB,IAAMC,WC5BLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9614cc14.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tour-alerts.e16fb8f4.svg\";","module.exports = __webpack_public_path__ + \"static/media/tour-issues.4b1cecb2.svg\";","module.exports = __webpack_public_path__ + \"static/media/tour-summary.cad733fc.svg\";","module.exports = __webpack_public_path__ + \"static/media/tour-trace.a6c5a4c5.svg\";","module.exports = __webpack_public_path__ + \"static/media/tour-builder.56e9724f.svg\";","module.exports = __webpack_public_path__ + \"static/media/tour-graph.c1ac5be9.svg\";","module.exports = __webpack_public_path__ + \"static/media/tour-search.670b06a8.svg\";","module.exports = __webpack_public_path__ + \"static/media/tour-queries.131a7a9b.svg\";","module.exports = __webpack_public_path__ + \"static/media/tour-discover.4e97f492.svg\";","module.exports = __webpack_public_path__ + \"static/media/tour-commits.17d3fd05.svg\";","module.exports = __webpack_public_path__ + \"static/media/tour-terminal.9c321be2.svg\";","module.exports = __webpack_public_path__ + \"static/media/tour-releases.dd25cf81.svg\";","module.exports = __webpack_public_path__ + \"static/media/tour-email.f987d30e.svg\";","module.exports = __webpack_public_path__ + \"static/media/tour-graphdouble.3dfcbcc0.svg\";","module.exports = __webpack_public_path__ + \"static/media/tour-tags.0a094fa0.svg\";","module.exports = __webpack_public_path__ + \"static/media/tour-breadcrumbs.2cf11847.svg\";","module.exports = __webpack_public_path__ + \"static/media/tour-feedback.07a268e4.svg\";","module.exports = __webpack_public_path__ + \"static/media/tour-results.18719ec1.svg\";","import React from 'react';\nimport { Global, css } from '@emotion/core';\n\nexport const GlobalStyle = () => (\n  <Global\n    styles={css`\n      @font-face {\n        font-family: 'Rubik';\n        src: url('./fonts/rubik-regular.woff') format('woff2'),\n          url('./fonts/rubik-regular.woff') format('woff');\n        font-weight: normal;\n        font-style: normal;\n      }\n      @font-face {\n        font-family: 'Rubik';\n        src: url('./fonts/rubik-medium.woff') format('woff2'),\n          url('./fonts/rubik-medium.woff') format('woff');\n        font-weight: bold;\n        font-style: normal;\n      }\n      body {\n        margin: 0;\n        font-family: 'Rubik', sans-serif;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        font-size: 16px;\n      }\n      h1 {\n        font-size: 2.488em;\n      }\n      h2 {\n        font-size: 2.074em;\n      }\n      h3 {\n        font-size: 1.728em;\n      }\n      h4 {\n        font-size: 1.44em;\n      }\n      h5 {\n        font-size: 1.2em;\n      }\n      h1, h2, h3, h4, h5 {\n        font-weight: normal;\n      }\n      p {\n        font-size: 1em;\n      }\n      small {\n        font-size: 0.833em;\n      }\n    `}\n  />\n)\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { GlobalStyle } from '../styles/global';\n// import { ThemeProvider } from 'emotion-theming';\n// import theme from '../styles/theme';\n\nimport AlertSvg from '../assets/tour-alerts.svg';\nimport IssueSvg from '../assets/tour-issues.svg';\nimport SummarySvg from '../assets/tour-summary.svg';\nimport TraceSvg from '../assets/tour-trace.svg';\nimport BuilderSvg from '../assets/tour-builder.svg';\nimport GraphSvg from '../assets/tour-graph.svg';\nimport SearchSvg from '../assets/tour-search.svg';\nimport QueriesSvg from '../assets/tour-queries.svg';\nimport DiscoverSvg from '../assets/tour-discover.svg';\nimport CommitSvg from '../assets/tour-commits.svg';\nimport TerminalSvg from '../assets/tour-terminal.svg';\nimport ReleasesSvg from '../assets/tour-releases.svg';\nimport EmailSvg from '../assets/tour-email.svg';\nimport GraphDoubleSvg from '../assets/tour-graphdouble.svg';\nimport TagsSvg from '../assets/tour-tags.svg';\nimport BreadcrumbsSvg from '../assets/tour-breadcrumbs.svg';\nimport FeedbackSvg from '../assets/tour-feedback.svg';\nimport ResultsSvg from '../assets/tour-results.svg';\n\nconst Container = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  grid-gap: 16px;\n  height: 100vh;\n  margin: 40px;\n`\n\nconst Image = styled('img')`\n  max-width: 300px;\n  max-height: 200px;\n  justify-self: center;\n  align-self: center;\n`;\n\nclass Main extends React.Component {\n  render() {\n    return (\n      <Container>\n        <GlobalStyle />\n        <Image src={SummarySvg} alt='' />\n        <Image src={IssueSvg} alt='' />\n        <Image src={AlertSvg} alt='' />\n        <Image src={TraceSvg} alt='' />\n        <Image src={BuilderSvg} alt='' />\n        <Image src={GraphSvg} alt='' />\n        <Image src={SearchSvg} alt='' />\n        <Image src={QueriesSvg} alt='' />\n        <Image src={DiscoverSvg} alt='' />\n        <Image src={CommitSvg} alt='' />\n        <Image src={TerminalSvg} alt='' />\n        <Image src={ReleasesSvg} alt='' />\n        <Image src={EmailSvg} alt='' />\n        <Image src={GraphDoubleSvg} alt='' />\n        <Image src={TagsSvg} alt='' />\n        <Image src={BreadcrumbsSvg} alt='' />\n        <Image src={FeedbackSvg} alt='' />\n        <Image src={ResultsSvg} alt='' />\n      </Container>\n  )}\n}\n\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './layouts/main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}